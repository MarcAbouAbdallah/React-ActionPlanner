{"ast":null,"code":"var _jsxFileName = \"/Users/marc/Desktop/Projects/react-task-tracker/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Header from './components/Header.js';\nimport Footer from './components/Footer.js';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport About from './components/About';\n\n// Root component that contains all other components\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // States are stored in the top component (to use them everywhere) and passed to components through props (Can also use other state management tools like Redux, Context API...)\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks(); // fetchTasks() returns a promise\n      setTasks(tasksFromServer); // Update state\n    };\n    getTasks();\n  }, []); //Empty dependency array\n\n  // Fetch all Tasks from server\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5001/tasks');\n    const data = await res.json();\n    return data;\n  };\n\n  // Fetch Task from server\n  const fetchTask = async id => {\n    const res = await fetch(`http://localhost:5001/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  };\n\n  // Functions to be passed to sub-components\n\n  // Toggle Task reminder\n  const toggleReminder = async id => {\n    const taskToToggle = await fetchTask(id);\n    const updatedTask = {\n      ...taskToToggle,\n      reminder: !taskToToggle.reminder\n    };\n\n    // Update reminder in DB\n    const res = await fetch(`http://localhost:5001/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updatedTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? {\n      ...task,\n      reminder: data.reminder\n    } : task // Toggle reminder for the task with given id only\n    ));\n  };\n\n  // Add Task (called on form submission)\n  const addTask = async task => {\n    const res = await fetch('http://localhost:5001/tasks', {\n      method: \"POST\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task) // Convert from JS object to JSON\n    });\n    const newTask = await res.json();\n    setTasks([...tasks, newTask]); // Changing the state by adding new task to existing ones\n  };\n\n  // Delete Task\n  const deleteTask = async id => {\n    await fetch(`http://localhost:5001/tasks/${id}`, {\n      method: 'DELETE'\n    }); // Delete Task from server\n\n    // This is how to manipulate states (immutable) by calling set function\n    setTasks(tasks.filter(task => task.id !== id)); // Change the state using filter()\n  };\n\n  // Call all components (Headers, Tasks ...): Can pass states and functions, use conditional logic ...\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onAdd: () => setShowAddTask(!showAddTask),\n        showAdd: showAddTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n              onAdd: addTask\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 31\n            }, this) // && is a quick way to use a ternary ? :\n            , tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n              tasks: tasks,\n              onDelete: deleteTask,\n              onToggle: toggleReminder\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this) //Pass down states and functions (through props)\n            : 'No tasks to show']\n          }, void 0, true) // Wrap it around empty fragment\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/about\",\n          component: /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","BrowserRouter","Router","Route","Routes","Header","Footer","Tasks","AddTask","About","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","showAddTask","setShowAddTask","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","fetchTask","id","toggleReminder","taskToToggle","updatedTask","reminder","method","headers","body","JSON","stringify","map","task","addTask","newTask","deleteTask","filter","children","className","onAdd","showAdd","fileName","_jsxFileName","lineNumber","columnNumber","path","element","length","onDelete","onToggle","component","_c","$RefreshReg$"],"sources":["/Users/marc/Desktop/Projects/react-task-tracker/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\n\nimport Header from './components/Header.js'\nimport Footer from './components/Footer.js'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\nimport About from './components/About'\n\n// Root component that contains all other components\nfunction App() {\n\n  // States are stored in the top component (to use them everywhere) and passed to components through props (Can also use other state management tools like Redux, Context API...)\n  const [showAddTask, setShowAddTask] = useState(false)\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks() // fetchTasks() returns a promise\n      setTasks(tasksFromServer) // Update state\n    }\n    getTasks()\n  }, []) //Empty dependency array\n\n\n  // Fetch all Tasks from server\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5001/tasks')\n    const data = await res.json()\n\n    return data\n  }\n\n  // Fetch Task from server\n  const fetchTask = async (id) => {\n    const res = await fetch(`http://localhost:5001/tasks/${id}`)\n    const data = await res.json()\n\n    return data\n  }\n\n  // Functions to be passed to sub-components\n\n  // Toggle Task reminder\n  const toggleReminder = async (id) => {\n\n    const taskToToggle = await fetchTask(id)\n    const updatedTask = { ...taskToToggle, reminder: !taskToToggle.reminder }\n\n    // Update reminder in DB\n    const res = await fetch(`http://localhost:5001/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updatedTask)\n    })\n\n    const data = await res.json()\n\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, reminder: data.reminder } : task // Toggle reminder for the task with given id only\n      )\n    )\n  }\n\n  // Add Task (called on form submission)\n  const addTask = async (task) => {\n    const res = await fetch('http://localhost:5001/tasks', {\n      method: \"POST\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task) // Convert from JS object to JSON\n    })\n\n    const newTask = await res.json()\n\n    setTasks([...tasks, newTask]) // Changing the state by adding new task to existing ones\n\n  }\n\n  // Delete Task\n  const deleteTask = async (id) => {\n    await fetch(`http://localhost:5001/tasks/${id}`,\n      {\n        method: 'DELETE'\n\n      }) // Delete Task from server\n\n    // This is how to manipulate states (immutable) by calling set function\n    setTasks(tasks.filter((task) => task.id !== id)) // Change the state using filter()\n  }\n\n\n  // Call all components (Headers, Tasks ...): Can pass states and functions, use conditional logic ...\n  return (\n    <Router>\n      <div className=\"container\">\n\n        <Header onAdd={() => setShowAddTask(!showAddTask)} showAdd={showAddTask} />\n\n\n        <Routes>\n          <Route path='/' element={\n            <>\n              {showAddTask && <AddTask onAdd={addTask} /> // && is a quick way to use a ternary ? :\n              }\n\n              {tasks.length > 0 ? (\n                <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder} /> //Pass down states and functions (through props)\n              ) : (\n                'No tasks to show'\n              )}\n            </> // Wrap it around empty fragment\n          } />\n\n          <Route path='/about' component={<About />} />\n        </Routes>\n\n        <Footer />\n      </div>\n    </Router>\n  )\n\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}