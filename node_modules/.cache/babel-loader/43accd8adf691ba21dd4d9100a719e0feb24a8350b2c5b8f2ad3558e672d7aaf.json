{"ast":null,"code":"var _jsxFileName = \"/Users/marc/Desktop/Projects/react-task-tracker/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Header from './components/Header.js';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\n\n// Root component that contains all other components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // States are stored in the top component (to use them everywhere) and passed to components through props (Can also use other state management tools like Redux, Context API...)\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks(); // fetchTasks() returns a promise\n      setTasks(tasksFromServer); // Update state\n    };\n    getTasks();\n  }, []); //Empty dependency array\n\n  // Fetch all Tasks from server\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5001/tasks');\n    const data = await res.json();\n    return data;\n  };\n\n  // Fetch Task from server\n  const fetchTask = async id => {\n    const res = await fetch(`http://localhost:5001/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  };\n\n  // Functions to be passed to sub-components\n  // Toggle Task reminder\n  const toggleReminder = async id => {\n    const taskToToggle = await fetchTask(id);\n    const updatedTask = {\n      ...taskToToggle,\n      reminder: !taskToToggle.reminder\n    };\n\n    // Update reminder in DB\n    const res = await fetch(`http://localhost:5001/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updatedTask)\n    });\n    setTasks(tasks.map(task => task.id === id ? {\n      ...task,\n      reminder: !task.reminder\n    } : task // Toggle reminder for the task with given id only\n    ));\n  };\n\n  // Add Task (called on form submission)\n  const addTask = async task => {\n    const res = await fetch('http://localhost:5001/tasks', {\n      method: \"POST\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task) // Convert from JS object to JSON\n    });\n    const newTask = await res.json();\n    setTasks([...tasks, newTask]); // Changing the state by adding new task to existing ones\n  };\n\n  // Delete Task\n  const deleteTask = async id => {\n    await fetch(`http://localhost:5001/tasks/${id}`, {\n      method: 'DELETE'\n    }); // Delete Task from server\n\n    // This is how to manipulate states (immutable) by calling set function\n    setTasks(tasks.filter(task => task.id !== id)); // Change the state using filter()\n  };\n\n  // Call all components (Headers, Tasks ...): Can pass states and functions, use conditional logic ...\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowAddTask(!showAddTask),\n      showAdd: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 23\n    }, this) // && is a quick way to use a ternary ? :\n    , tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this) //Pass down states and functions (through props)\n    : 'No tasks to show']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Header","Tasks","AddTask","jsxDEV","_jsxDEV","App","_s","showAddTask","setShowAddTask","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","fetchTask","id","toggleReminder","taskToToggle","updatedTask","reminder","method","headers","body","JSON","stringify","map","task","addTask","newTask","deleteTask","filter","className","children","onAdd","showAdd","fileName","_jsxFileName","lineNumber","columnNumber","length","onDelete","onToggle","_c","$RefreshReg$"],"sources":["/Users/marc/Desktop/Projects/react-task-tracker/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport Header from './components/Header.js'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\n\n// Root component that contains all other components\nfunction App() {\n\n  // States are stored in the top component (to use them everywhere) and passed to components through props (Can also use other state management tools like Redux, Context API...)\n  const [showAddTask, setShowAddTask] = useState(false)\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks() // fetchTasks() returns a promise\n      setTasks(tasksFromServer) // Update state\n    }\n    getTasks()\n  }, []) //Empty dependency array\n\n\n  // Fetch all Tasks from server\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5001/tasks')\n    const data = await res.json()\n\n    return data\n  }\n\n  // Fetch Task from server\n  const fetchTask = async (id) => {\n    const res = await fetch(`http://localhost:5001/tasks/${id}`)\n    const data = await res.json()\n\n    return data\n  }\n\n  // Functions to be passed to sub-components\n  // Toggle Task reminder\n  const toggleReminder = async (id) => {\n    const taskToToggle = await fetchTask(id)\n\n    const updatedTask = { ...taskToToggle, reminder: !taskToToggle.reminder }\n\n    // Update reminder in DB\n    const res = await fetch(`http://localhost:5001/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updatedTask)\n    })\n\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, reminder: !task.reminder } : task // Toggle reminder for the task with given id only\n      )\n    )\n  }\n\n  // Add Task (called on form submission)\n  const addTask = async (task) => {\n    const res = await fetch('http://localhost:5001/tasks', {\n      method: \"POST\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task) // Convert from JS object to JSON\n    })\n\n    const newTask = await res.json()\n\n    setTasks([...tasks, newTask]) // Changing the state by adding new task to existing ones\n\n  }\n\n  // Delete Task\n  const deleteTask = async (id) => {\n    await fetch(`http://localhost:5001/tasks/${id}`,\n      {\n        method: 'DELETE'\n\n      }) // Delete Task from server\n\n    // This is how to manipulate states (immutable) by calling set function\n    setTasks(tasks.filter((task) => task.id !== id)) // Change the state using filter()\n  }\n\n\n  // Call all components (Headers, Tasks ...): Can pass states and functions, use conditional logic ...\n  return (\n    <div className=\"container\">\n\n      <Header onAdd={() => setShowAddTask(!showAddTask)} showAdd={showAddTask} />\n\n      {showAddTask && <AddTask onAdd={addTask} /> // && is a quick way to use a ternary ? :\n      }\n\n      {tasks.length > 0 ? (\n        <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder} /> //Pass down states and functions (through props)\n      ) : (\n        'No tasks to show'\n      )}\n\n    </div>\n  )\n\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}